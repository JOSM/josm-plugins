options {
  STATIC = false;
}

PARSER_BEGIN(Level0LParser)
package net.simon04.comfort0.level0l.parsergen;
import org.openstreetmap.josm.data.osm.*;
import org.openstreetmap.josm.data.coor.*;
import java.util.ArrayList;
import java.util.List;
public class Level0LParser {
}
PARSER_END(Level0LParser)

<DEFAULT> //HEADER
TOKEN: {
    <EOL: ("\n" | "\r" | "\r\n") >
    | <ID: (["0"-"9"])+ >
    | <NODE: "node" >
    | <WAY: "way" >
    | <RELATION: "relation" >
    | <WY: "wy" >
    | <ND: "nd" >
    | <REL: "rel" >
    | <EQ: "=" > : VALUE
    | <IDENT: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", ":", "-", "0"-"9"])* >
    | <FLOAT: ("+" | "-")? (["0"-"9"])+ ("." (["0"-"9"])+)? >
    | <COLON: ":" >
    | <COMMA: "," >
    | <WHITESPACE: ([" ", "\t"])+ >
    | <COMMENT_START: "#"> : COMMENT
}

<COMMENT>
SKIP: { < ~["\n", "\r"] > }

<COMMENT>
TOKEN: {
    <C_EOL: ("\n" | "\r" | "\r\n") > : DEFAULT
}

<VALUE>
TOKEN: {
    <V_EOL: ("\n" | "\r" | "\r\n") > : DEFAULT
    | <TEXT: (~["\n", "\r"])+ >
}

List<PrimitiveData> primitives():
{
    List<PrimitiveData> primitives = new ArrayList<PrimitiveData>();
    PrimitiveData p;
}
{
    (
        p = node()
        { primitives.add(p); }
    |
        p = way()
        { primitives.add(p); }
    |
        p = relation()
        { primitives.add(p); }
    |
        <COMMENT_START> <C_EOL> | <EOL>
    )*
    <EOF>
    { return primitives; }
}

NodeData node():
{
    NodeData r;
    Token id, lat, lon;
}
{
    <NODE>
    { r = new NodeData(); }
    ( <WHITESPACE> )+
    id=<ID>
    { r.setId(Long.parseLong(id.image)); }
    ( <WHITESPACE> )*
    <COLON>
    ( <WHITESPACE> )*
    lat=<FLOAT>
    ( <WHITESPACE> )*
    <COMMA>
    ( <WHITESPACE> )*
    lon=<FLOAT>
    { r.setCoor(new LatLon(Double.parseDouble(lat.image), Double.parseDouble(lon.image))); }
    ( <WHITESPACE> )*
    ( <COMMENT_START> <C_EOL> | <EOL> )
    ( tag(r) )*
    { return r; }
}

WayData way():
{
    WayData r;
    Token id;
}
{
    <WAY>
    ( <WHITESPACE> )+
    { r = new WayData(); }
    id=<ID>
    { r.setId(Long.parseLong(id.image)); }
    ( <WHITESPACE> )*
    ( <COMMENT_START> <C_EOL> | <EOL> )
    way_data(r)
    { return r; }
}

RelationData relation():
{
    RelationData r;
    Token id;
}
{
    <RELATION>
    ( <WHITESPACE> )+
    { r = new RelationData(); }
    id=<ID>
    { r.setId(Long.parseLong(id.image)); }
    ( <WHITESPACE> )*
    ( <COMMENT_START> <C_EOL> | <EOL> )
    relation_data(r)
    { return r; }
}

void way_data(WayData r):
{}
{
    ( LOOKAHEAD(3) way_node(r) | tag(r) )*
}

void way_node(WayData r):
{
    Token id;
}
{
    ( <WHITESPACE> )+
    <ND>
    ( <WHITESPACE> )+
    id=<ID>
    { r.getNodeIds().add(Long.parseLong(id.image)); }
    ( <WHITESPACE> )*
    ( <COMMENT_START> <C_EOL> | <EOL> )
}

void relation_data(RelationData r):
{}
{
    ( LOOKAHEAD(3) relation_member(r) | tag(r) )*
}

void relation_member(RelationData r):
{
    OsmPrimitiveType type;
    Token id;
    Token role = null;
}
{
    ( <WHITESPACE> )+
    (
        <ND> { type = OsmPrimitiveType.NODE; }
    |
        <WY> { type = OsmPrimitiveType.WAY; }
    |
        <REL> { type = OsmPrimitiveType.RELATION; }
    )
    ( <WHITESPACE> )+
    id=<ID>
    (
        LOOKAHEAD(2)
        ( <WHITESPACE> )+
        role=<IDENT>
    )?
    { r.getMembers().add(new RelationMemberData(role != null ? role.image : "", type, Long.parseLong(id.image))); }
    ( <WHITESPACE> )*
    ( <COMMENT_START> <C_EOL> | <EOL> )
}

void tag(PrimitiveData r):
{
    Token k, v;
}
{
    ( <WHITESPACE> )+
    k=<IDENT>
    ( <WHITESPACE> )*
    <EQ>
    ( <WHITESPACE> )*
    v=<TEXT>
    <V_EOL>
    { r.put(k.image.trim(), v.image.trim()); }
}