diff -r src-netbeans-524f40b94a30-origin/org/netbeans/modules/keyring/fallback/FallbackProvider.java src/org/netbeans/modules/keyring/fallback/FallbackProvider.java
45,47d44
< import java.util.Arrays;
< import java.util.HashMap;
< import java.util.Map;
49d45
< import java.util.concurrent.Callable;
52,54d47
< import java.util.prefs.BackingStoreException;
< import java.util.prefs.Preferences;
< import org.netbeans.api.keyring.Keyring;
58,63d50
< import org.openide.DialogDisplayer;
< import org.openide.NotifyDescriptor;
< import org.openide.util.Lookup;
< import org.openide.util.NbBundle;
< import org.openide.util.NbPreferences;
< import org.openide.util.lookup.ServiceProvider;
68,69c55
< @ServiceProvider(service=KeyringProvider.class, position=1000)
< public class FallbackProvider implements KeyringProvider, Callable<Void> {
---
> public class FallbackProvider implements KeyringProvider {
76c62,75
<  
---
>     private IPreferences pre;
>     
>     // simple interface for a generic preferences store
>     public interface IPreferences {
>         String get(String key, String def);
>         void put(String key, String val);
>         void remove(String key);
>     }
> 
>     public FallbackProvider(EncryptionProvider encryption, IPreferences pref) {
>         this.encryption = encryption;
>         this.pre = pref;
>     }
>     
78,87c77,79
<         for (EncryptionProvider p : Lookup.getDefault().lookupAll(EncryptionProvider.class)) {
<             if (p.enabled()) {
<                 encryption = p;
<                 Preferences prefs = prefs();
<                 Utils.goMinusR(prefs);
<                 p.encryptionChangingCallback(this);
<                 if (!testSampleKey(prefs)) {
<                     continue;
<                 }
<                 LOG.log(Level.FINE, "Using provider: {0}", p);
---
>         if (encryption.enabled()) {
>             if (testSampleKey()) {
>                 LOG.log(Level.FINE, "Using provider: {0}", encryption);
95,106c87,92
<     private boolean testSampleKey(Preferences prefs) {
<         byte[] ciphertext = prefs.getByteArray(SAMPLE_KEY, null);
<         if (ciphertext == null) {
<             encryption.freshKeyring(true);
<             if (_save(SAMPLE_KEY, (SAMPLE_KEY + UUID.randomUUID()).toCharArray(),
<                     NbBundle.getMessage(FallbackProvider.class, "FallbackProvider.sample_key.description"))) {
<                 LOG.fine("saved sample key");
<                 return true;
<             } else {
<                 LOG.fine("could not save sample key");
<                 return false;
<             }
---
>     private boolean testSampleKey() {
>         encryption.freshKeyring(true);
>         if (_save(SAMPLE_KEY, (SAMPLE_KEY + UUID.randomUUID()).toCharArray(),
>                 "Sample value ensuring that decryption is working.")) {
>             LOG.fine("saved sample key");
>             return true;
108,143c94,95
<             encryption.freshKeyring(false);
<             while (true) {
<                 try {
<                     if (new String(encryption.decrypt(ciphertext)).startsWith(SAMPLE_KEY)) {
<                         LOG.fine("succeeded in decrypting sample key");
<                         return true;
<                     } else {
<                         LOG.fine("wrong result decrypting sample key");
<                     }
<                 } catch (Exception x) {
<                     LOG.log(Level.FINE, "failed to decrypt sample key", x);
<                 }
<                 if (!encryption.decryptionFailed()) {
<                     LOG.fine("sample key decryption failed");
<                     return promptToDelete(prefs);
<                 }
<                 LOG.fine("will retry decryption of sample key");
<             }
<         }
<     }
< 
<     private boolean promptToDelete(Preferences prefs) {
<         Object result = DialogDisplayer.getDefault().notify(new NotifyDescriptor.Confirmation(
<                 NbBundle.getMessage(FallbackProvider.class, "FallbackProvider.msg_clear_keys"),
<                 NbBundle.getMessage(FallbackProvider.class, "FallbackProvider.title_clear_keys"),
<                 NotifyDescriptor.OK_CANCEL_OPTION));
<         if (result == NotifyDescriptor.OK_OPTION) {
<             try {
<                 LOG.log(Level.FINE, "agreed to delete stored passwords: {0}", Arrays.asList(prefs.keys()));
<                 prefs.clear();
<                 return testSampleKey(prefs);
<             } catch (BackingStoreException x) {
<                 LOG.log(Level.INFO, null, x);
<             }
<         } else {
<             LOG.fine("refused to delete stored passwords");
---
>             LOG.fine("could not save sample key");
>             return false;
145,149d96
<         return false;
<     }
< 
<     private Preferences prefs() {
<         return NbPreferences.forModule(Keyring.class).node(encryption.id());
153c100,101
<         byte[] ciphertext = prefs().getByteArray(key, null);
---
>         String ciphertext_string = pre.get(key, null);
>         byte[] ciphertext = ciphertext_string == null ? null : Utils.chars2Bytes(ciphertext_string.toCharArray());
169d116
<         Preferences prefs = prefs();
171c118,120
<             prefs.putByteArray(key, encryption.encrypt(password));
---
>             byte[] encryptedPasswordByteArray = encryption.encrypt(password);
>             String encryptedPassword = encryptedPasswordByteArray == null ? null : String.valueOf(Utils.bytes2Chars(encryptedPasswordByteArray));
>             pre.put(key, encryptedPassword);
178c127
<             prefs.put(key + DESCRIPTION, description);
---
>             pre.put(key + DESCRIPTION, description);
184,209c133,134
<         Preferences prefs = prefs();
<         prefs.remove(key);
<         prefs.remove(key + DESCRIPTION);
<     }
< 
<     public Void call() throws Exception { // encryption changing
<         LOG.fine("encryption changing");
<         Map<String,char[]> saved = new HashMap<String,char[]>();
<         Preferences prefs = prefs();
<         for (String k : prefs.keys()) {
<             if (k.endsWith(DESCRIPTION)) {
<                 continue;
<             }
<             byte[] ciphertext = prefs.getByteArray(k, null);
<             if (ciphertext == null) {
<                 continue;
<             }
<             saved.put(k, encryption.decrypt(ciphertext));
<         }
<         LOG.log(Level.FINE, "reencrypting keys: {0}", saved.keySet());
<         encryption.encryptionChanged();
<         for (Map.Entry<String,char[]> entry : saved.entrySet()) {
<             prefs.putByteArray(entry.getKey(), encryption.encrypt(entry.getValue()));
<         }
<         LOG.fine("encryption changing finished");
<         return null;
---
>         pre.remove(key);
>         pre.remove(key + DESCRIPTION);
diff -r src-netbeans-524f40b94a30-origin/org/netbeans/modules/keyring/gnome/GnomeProvider.java src/org/netbeans/modules/keyring/gnome/GnomeProvider.java
46,47d45
< import java.text.MessageFormat;
< import java.util.MissingResourceException;
52,53d49
< import org.openide.util.NbBundle;
< import org.openide.util.lookup.ServiceProvider;
55d50
< @ServiceProvider(service=KeyringProvider.class, position=100)
77,84c72
<         String appName;
<         try {
<             appName = MessageFormat.format(
<                     NbBundle.getBundle("org.netbeans.core.windows.view.ui.Bundle").getString("CTL_MainWindow_Title_No_Project"),
<                     /*System.getProperty("netbeans.buildnumber")*/"â€¦");
<         } catch (MissingResourceException x) {
<             appName = "NetBeans"; // NOI18N
<         }
---
>         String appName = "JOSM";
diff -r src-netbeans-524f40b94a30-origin/org/netbeans/modules/keyring/kde/KWalletProvider.java src/org/netbeans/modules/keyring/kde/KWalletProvider.java
48d47
< import java.text.MessageFormat;
50d48
< import java.util.MissingResourceException;
54,55d51
< import org.openide.util.NbBundle;
< import org.openide.util.lookup.ServiceProvider;
61d56
< @ServiceProvider(service=KeyringProvider.class, position=99)
224,230c219
<         String appName;
<         try {
<             appName = MessageFormat.format(NbBundle.getBundle("org.netbeans.core.windows.view.ui.Bundle").getString("CTL_MainWindow_Title_No_Project"),version ? System.getProperty("netbeans.buildnumber"):"");
<         } catch (MissingResourceException x) {
<             appName = "NetBeans"+(version? " "+System.getProperty("netbeans.buildnumber"):"");
<         }
<         return appName.toCharArray();
---
>         return "JOSM".toCharArray();
diff -r src-netbeans-524f40b94a30-origin/org/netbeans/modules/keyring/mac/MacProvider.java src/org/netbeans/modules/keyring/mac/MacProvider.java
50,51d49
< import org.openide.util.Utilities;
< import org.openide.util.lookup.ServiceProvider;
53d50
< @ServiceProvider(service=KeyringProvider.class, position=200)
59,63c56
<         if (Boolean.getBoolean("netbeans.keyring.no.native")) {
<             LOG.fine("native keyring integration disabled");
<             return false;
<         }
<         return Utilities.isMac();
---
>         return true; // test elsewhere if we are on a mac
69c62
<             byte[] accountName = "NetBeans".getBytes("UTF-8");
---
>             byte[] accountName = "JOSM".getBytes("UTF-8");
89c82
<             byte[] accountName = "NetBeans".getBytes("UTF-8");
---
>             byte[] accountName = "JOSM".getBytes("UTF-8");
103c96
<             byte[] accountName = "NetBeans".getBytes("UTF-8");
---
>             byte[] accountName = "JOSM".getBytes("UTF-8");
diff -r src-netbeans-524f40b94a30-origin/org/netbeans/modules/keyring/win32/Win32Protect.java src/org/netbeans/modules/keyring/win32/Win32Protect.java
57,58d56
< import org.openide.util.Utilities;
< import org.openide.util.lookup.ServiceProvider;
65d62
< @ServiceProvider(service=EncryptionProvider.class, position=100)
71,78c68
<         if (!Utilities.isWindows()) {
<             LOG.fine("not running on Windows");
<             return false;
<         }
<         if (Boolean.getBoolean("netbeans.keyring.no.native")) {
<             LOG.fine("native keyring integration disabled");
<             return false;
<         }
---
>         // asssume, we have windows os
