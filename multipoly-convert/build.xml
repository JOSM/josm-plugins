<?xml version="1.0" encoding="UTF-8"?>
<!--
** This is the build file for the multipoly-convert plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="multipoly-convert" default="dist" basedir=".">


	<!-- enter the SVN commit message -->
	<property name="commit.message" value="Changed the constructor signature of the plugin main class" />
	<!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
	<property name="plugin.main.version" value="3835" />


	<!-- compilation properties -->
	<property name="josm.build.dir" value="../../core" />
	<property name="josm.home.dir" value="${user.home}/.josm" />
	<property name="josm" location="../../core/dist/josm-custom.jar" />
	<property name="plugin.build.dir" value="build" />
	<property name="plugin.dist.dir" value="../../dist" />
	<property name="plugin.name" value="${ant.project.name}" />
	<property name="plugin.jar" value="${plugin.dist.dir}/${plugin.name}.jar" />

	<!-- There's no josm.jar in the svn, so point "josm" to a local copy of your JOSM binary -->
	<property name="josm" location="../../core/dist/josm-custom.jar" />

	<property name="ant.build.javac.target" value="1.5" />

	<target name="init">
		<mkdir dir="${plugin.build.dir}">
		</mkdir>
		<mkdir dir="${plugin.dist.dir}">
		</mkdir>
	</target>

	<target name="compile" depends="init">
		<echo message="creating ${plugin.jar}" />
		<javac srcdir="src" target="1.5" classpath="${josm}" destdir="build" debug="true">
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="revision">
		<exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
			<env key="LANG" value="C" />
			<arg value="info" />
			<arg value="--xml" />
			<arg value="." />
		</exec>
		<xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true" />
		<delete file="REVISION" />
	</target>

	<target name="dist" depends="compile,revision">
		<copy todir="${plugin.build.dir}/images">
			<fileset dir="images" />
		</copy>
		<jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
			<manifest>
				<attribute name="Author" value="StÃ©phane Brunner" />
				<attribute name="Plugin-Class" value="converttomultipoly.MultipolyPlugin" />
				<attribute name="Plugin-Description" value="Simply convert an area to a multipolygon." />
				<attribute name="Plugin-Icon" value="images/multipoly_convert.png"/>
				<attribute name="Plugin-Version" value="${version.entry.commit.revision}" />
				<attribute name="Plugin-Date" value="${version.entry.commit.date}" />
				<attribute name="Plugin-Link" value="http://www.stephane-brunner.ch/mediawiki/index.php/Plugins" />
				<attribute name="Plugin-Mainversion" value="${plugin.main.version}" />
				<!--attribute name="2830_Plugin-Url" value="20583;http://trac.openstreetmap.org/browser/applications/editors/josm/dist/multipoly-convert.jar?rev=20584&amp;format=raw" /-->
			</manifest>
		</jar>
	</target>

	<target name="clean">
		<delete dir="${plugin.build.dir}" />
		<delete file="${plugin.jar}" />
	</target>

	<target name="clean_install">
		<delete file="${plugins}/multipoly-convert.jar" />
	</target>

	<target name="install" depends="dist">
		<property environment="env" />
		<condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
			<and>
				<os family="windows" />
			</and>
		</condition>
		<copy file="${plugin.jar}" todir="${josm.plugins.dir}" />
	</target>

	<!--
	************************** Publishing the plugin *********************************** 
	-->
	<!--
		** extracts the JOSM release for the JOSM version in ../core and saves it in the 
		** property ${coreversion.info.entry.revision}
		**
		-->
	<target name="core-info">
		<exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
			<env key="LANG" value="C" />
			<arg value="info" />
			<arg value="--xml" />
			<arg value="../../core" />
		</exec>
		<xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true" />
		<echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
		<echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
		<delete file="core.info.xml" />
	</target>

	<!--
		** commits the source tree for this plugin
		-->
	<target name="commit-current">
		<echo>Commiting the plugin source with message '${commit.message}' ...</echo>
		<exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
			<env key="LANG" value="C" />
			<arg value="commit" />
			<arg value="-m '${commit.message}'" />
			<arg value="." />
		</exec>
	</target>

	<!--
		** updates (svn up) the source tree for this plugin
		-->
	<target name="update-current">
		<echo>Updating plugin source ...</echo>
		<exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
			<env key="LANG" value="C" />
			<arg value="up" />
			<arg value="." />
		</exec>
		<echo>Updating ${plugin.jar} ...</echo>
		<exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
			<env key="LANG" value="C" />
			<arg value="up" />
			<arg value="../dist/${plugin.jar}" />
		</exec>
	</target>

	<!--
		** commits the plugin.jar 
		-->
	<target name="commit-dist">
		<echo>
	***** Properties of published ${plugin.jar} *****
	Commit message    : '${commit.message}'					
	Plugin-Mainversion: ${plugin.main.version}
	JOSM build version: ${coreversion.info.entry.revision}
	Plugin-Version    : ${version.entry.commit.revision}
	***** / Properties of published ${plugin.jar} *****					
						
	Now commiting ${plugin.jar} ...
	</echo>
		<exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
			<env key="LANG" value="C" />
			<arg value="-m '${commit.message}'" />
			<arg value="commit" />
			<arg value="${plugin.jar}" />
		</exec>
	</target>

	<!-- ** make sure svn is present as a command line tool ** -->
	<target name="ensure-svn-present">
		<exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
			<env key="LANG" value="C" />
			<arg value="--version" />
		</exec>
		<fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
			<!-- return code not set at all? Most likely svn isn't installed -->
			<condition>
				<not>
					<isset property="svn.exit.code" />
				</not>
			</condition>
		</fail>
		<fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
			<!-- error code from SVN? Most likely svn is not what we are looking on this system -->
			<condition>
				<isfailure code="${svn.exit.code}" />
			</condition>
		</fail>
	</target>

	<target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
	</target>

</project>
