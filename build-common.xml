<?xml version="1.0" encoding="utf-8"?>
<!--
** Template for the build targets common to all plugins
** ====================================================
**
** To override a property, add it to the plugin build.xml _before_
** this template has been imported.
** To override a target, add it _after_ this template has been imported.
**
** Paths are relative to the build.xml that imports this template.
**
-->
<project name="plugin_common" basedir=".">

    <property name="josm"                   location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir"       value="build"/>
    <property name="plugin.src.dir"         value="src"/>
    <property name="plugin.lib.dir"         value="lib"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir"        value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="ant.build.javac.source" value="1.6"/>
    <property name="plugin.jar"             value="${plugin.dist.dir}/${ant.project.name}.jar"/>

    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}" includeantruntime="false">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <fileset dir="${plugin.lib.dir}" erroronmissingdir="no">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>
    <!--
    **********************************************************
    ** setup-dist - copies files for distribution
    **********************************************************
    -->
    <target name="setup-dist-default">
        <copy todir="${plugin.build.dir}/resources" failonerror="no" includeemptydirs="no">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images" failonerror="no" includeemptydirs="no">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data" failonerror="no" includeemptydirs="no">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE*"/>
                <include name="*GPL*"/>
            </fileset>
        </copy>
    </target>
    <target name="setup-dist">
        <antcall target="setup-dist-default" />
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <antcall target="setup-dist" />
        <delete file="MANIFEST" failonerror="no"/>
        <manifest file="MANIFEST" mode="update">
            <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
            <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            <attribute name="Plugin-Class" value="${plugin.class}" />
            <attribute name="Plugin-Description" value="${plugin.description}" />
            <attribute name="Plugin-Date" value="${version.entry.commit.date}" />
            <attribute name="Author" value="${plugin.author}"/>
        </manifest>
        <antcall target="add-manifest-attribute">
            <param name="manifest.attribute" value="Plugin-Link"/>
            <param name="propery.name" value="plugin.link"/>
            <param name="propery.value" value="${plugin.link}"/>
        </antcall>
        <antcall target="add-manifest-attribute">
            <param name="manifest.attribute" value="Plugin-Icon"/>
            <param name="propery.name" value="plugin.icon"/>
            <param name="propery.value" value="${plugin.icon}"/>
        </antcall>
        <antcall target="add-manifest-attribute">
            <param name="manifest.attribute" value="Plugin-Early"/>
            <param name="propery.name" value="plugin.early"/>
            <param name="propery.value" value="${plugin.early}"/>
        </antcall>
        <antcall target="add-manifest-attribute">
            <param name="manifest.attribute" value="Plugin-Requires"/>
            <param name="propery.name" value="plugin.requires"/>
            <param name="propery.value" value="${plugin.requires}"/>
        </antcall>
        <antcall target="add-manifest-attribute">
            <param name="manifest.attribute" value="Plugin-Stage"/>
            <param name="propery.name" value="plugin.stage"/>
            <param name="propery.value" value="${plugin.stage}"/>
        </antcall>
        <antcall target="additional-manifest" />
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}" manifest="MANIFEST">
            <zipgroupfileset dir="${plugin.lib.dir}" includes="*.jar" erroronmissingdir="no"/>
        </jar>
        <delete file="MANIFEST" failonerror="no"/>
        <antcall target="post-dist" />
    </target>
    <target name="post-dist">
    	<!-- to be overidden by plugins that need to perform additional tasks on resulting jar -->
    </target>
    <target name="add-manifest-attribute" depends="check-manifest-attribute" if="have-${propery.name}">
        <manifest file="MANIFEST" mode="update">
            <attribute name="${manifest.attribute}" value="${propery.value}" />
        </manifest>
    </target>
    <!-- target to add additional entries, empty in commons -->
    <target name="additional-manifest">
    </target>
    <target name="check-manifest-attribute">
        <condition property="have-${propery.name}">
            <and>
                <isset property="${propery.name}"/>
                <not>
                    <equals arg1="${propery.value}" arg2=""/>
                </not>
                <not>
                    <equals arg1="${propery.value}" arg2="..."/>
                </not>
            </and>
        </condition>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" outputproperty="svn.revision.output" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty prefix="version" keepRoot="false" collapseAttributes="true">
            <propertyresource name="svn.revision.output"/>
        </xmlproperty>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
    ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
    ** property ${coreversion.info.entry.revision}
    **
    -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
    ** commits the source tree for this plugin
    -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${commit.message}"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
    ** updates (svn up) the source tree for this plugin
    -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
    ** commits the plugin.jar 
    -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****

    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m"/>
            <arg value="${commit.message}"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>

    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>

    <target name="runjosm" depends="install">
        <java jar="${josm}" fork="true">
        </java>
    </target>

    <target name="profilejosm" depends="install">
        <nbprofiledirect>
        </nbprofiledirect>
        <java jar="${josm}" fork="true">
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
        </java>
    </target>
    <!--
    ** shows a help text 
    -->
    <target name="help">
        <echo>
    You can use following targets:
    * dist        This default target builds the plugin jar file
    * clean       Cleanup automatical created files
    * publish     Checkin source code, build jar and checkin plugin jar
                  (requires proper entry for SVN commit message!)
    * install     Install the plugin in current system
    * runjosm     Install plugin and start josm
    * profilejosm Install plugin and start josm in profiling mode
    
    There are other targets, which usually should not be called manually.
        </echo>
    </target>
</project>

