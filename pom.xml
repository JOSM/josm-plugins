<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.openstreetmap.josm.plugins</groupId>
  <artifactId>plugin-root</artifactId>
  <parent>
    <groupId>org.openstreetmap.josm</groupId>
    <artifactId>josm-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <relativePath>../core/nodist/pom.xml</relativePath>
  </parent>

  <name>JOSM Plugins</name>
  <url>https://josm.openstreetmap.de</url>
  <properties>
    <josm>../../core/dist/josm-custom.jar</josm>
    <josm.test.build.dir>../../core/test/build</josm.test.build.dir>
    <java.lang.version>11</java.lang.version>
    <maven.compiler.release>${java.lang.version}</maven.compiler.release>
    <plugin.tools.dir>../00_tools</plugin.tools.dir>
    <plugin.build.dir>build</plugin.build.dir>
    <plugin.test.dir>test</plugin.test.dir>
    <plugin.test.data.dir>${plugin.test.dir}/data</plugin.test.data.dir>
    <plugin.test.src.dir>${plugin.test.dir}/unit</plugin.test.src.dir>
    <plugin.src.dir>src</plugin.src.dir>
    <!-- most plugins default to resource directories in root, e.g. ./data, ./images, ./resources -->
    <plugin.resources.dir>${project.basedir}</plugin.resources.dir>
    <plugin.doc.dir>javadoc</plugin.doc.dir>
    <plugin.lib.dir>lib</plugin.lib.dir>
    <!-- this is the directory where the plugin jar is copied to -->
    <!-- We specifically don't want to put the new jars in dist just yet, this may change sometime -->
    <plugin.dist.dir>../../distMaven</plugin.dist.dir>
    <javadoc.executable>javadoc</javadoc.executable>
    <manifest>MANIFEST</manifest>
    <manifest.unixoid>MANIFEST-unixoid</manifest.unixoid>
    <manifest.windows>MANIFEST-windows</manifest.windows>
    <manifest.osx>MANIFEST-osx</manifest.osx>
    <plugin.compile.version>1.0-SNAPSHOT</plugin.compile.version>
    <plugin.jar>${project.name}.jar</plugin.jar>
    <plugin.unixoid.jar>${project.name}-unixoid.jar</plugin.unixoid.jar>
    <plugin.windows.jar>${project.name}-windows.jar</plugin.windows.jar>
    <plugin.osx.jar>${project.name}-osx.jar</plugin.osx.jar>
    <plugin.sources.jar>${project.name}-sources.jar</plugin.sources.jar>
    <plugin.javadoc.jar>${project.name}-javadoc.jar</plugin.javadoc.jar>
    <jacoco.inclbootstrapclasses>false</jacoco.inclbootstrapclasses>
    <jacoco.inclnolocationclasses>false</jacoco.inclnolocationclasses>
    <junit.printsummary>on</junit.printsummary>
    <sonar.projectKey>JOSM-Plugins</sonar.projectKey>
    <geotools.version>31.1</geotools.version>
  </properties>
  <packaging>pom</packaging>
  <inceptionYear>2005</inceptionYear>
  <licenses>
    <license>
      <name>GPL-2.0-or-later</name>
      <url>https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <organization>
    <name>JOSM</name>
    <url>https://josm.openstreetmap.de</url>
  </organization>
  <scm>
    <connection>scm:svn:https://josm.openstreetmap.de/svn/trunk</connection>
    <url>https://josm.openstreetmap.de/browser/josm/trunk</url>
  </scm>
  <issueManagement>
    <system>Trac</system>
    <url>https://josm.openstreetmap.de</url>
  </issueManagement>
  <mailingLists>
    <mailingList>
      <name>josm-dev</name>
      <archive>https://lists.openstreetmap.org/pipermail/josm-dev/</archive>
      <post>josm-dev@openstreetmap.org</post>
    </mailingList>
  </mailingLists>
  <modules>
    <module>../core/nodist/pom.xml</module>
    <module>addrinterpolation</module>
    <module>alignways</module>
    <module>apache-commons</module>
    <module>apache-http</module>
    <module>buildings_tools</module>
    <module>cadastre-fr</module>
    <module>canvec_helper</module>
    <module>colorscheme</module>
    <module>ColumbusCSV</module>
    <module>comfort0</module>
    <module>CommandLine</module>
    <module>Create_grid_of_ways</module>
    <module>CustomizePublicTransportStop</module>
    <module>dataimport</module>
    <module>DirectDownload</module>
    <module>DirectUpload</module>
    <module>editgpx</module>
    <module>ElevationProfile</module>
    <module>epci-fr</module>
    <module>eventbus</module>
    <module>ext_tools</module>
    <module>FastDraw</module>
    <module>FixAddresses</module>
    <module>flatlaf</module>
    <module>geochat</module>
    <module>geotools</module>
    <module>globalsat</module>
    <module>gpsblam</module>
    <module>graphview</module>
    <module>HouseNumberTaggingTool</module>
    <module>http2</module>
    <module>ejml</module>
    <module>imagery-xml-bounds</module>
    <module>imagery_cachexport</module>
    <module>imagery_offset_db</module>
    <module>imagewaypoint</module>
    <module>ImportImagePlugin</module>
    <module>importvec</module>
    <module>indoor_sweepline</module>
    <module>infomode</module>
    <module>jackson</module>
    <module>jaxb</module>
    <module>javafx</module>
    <module>jna</module>
    <module>jts</module>
    <module>junctionchecking</module>
    <module>lwjgl/modules</module>
    <module>livegps</module>
    <module>log4j</module>
    <module>measurement</module>
    <module>merge-overlap</module>
    <module>michigan_left</module>
    <module>namemanager</module>
    <module>NanoLog</module>
    <module>native-password-manager</module>
    <module>o5m</module>
    <module>opendata/modules</module>
    <module>OpeningHoursEditor</module>
    <module>openvisible</module>
    <module>OsmInspectorPlugin</module>
    <module>pbf</module>
    <module>pdfimport</module>
    <module>photo_geotagging</module>
    <module>photoadjust</module>
    <module>pointInfo</module>
    <module>poly</module>
    <module>print</module>
    <module>public_transport</module>
    <module>rasterfilters</module>
    <module>reltoolbox</module>
    <module>reverter</module>
    <module>roadsigns</module>
    <module>routes</module>
    <module>routing</module>
    <module>SaudiNationalAddress</module>
    <module>sds</module>
    <module>seachart</module>
    <module>seachartedit</module>
    <module>simplifyarea</module>
    <module>smed</module>
    <module>splinex</module>
    <module>sumoconvert</module>
    <module>surveyor</module>
    <module>tageditor</module>
    <module>tagging-preset-tester</module>
    <module>terracer</module>
    <module>touchscreenhelper</module>
    <module>tracer</module>
    <module>tracer2</module>
    <module>trustosm</module>
    <module>turnlanes</module>
    <module>turnrestrictions</module>
    <module>undelete</module>
    <module>utilsplugin2</module>
    <module>waydownloader</module>
    <module>waypoint_search</module>
    <module>wms-turbo-challenge2</module>
  </modules>
  <dependencies>
    <dependency>
      <groupId>org.openstreetmap.josm</groupId>
      <artifactId>josm</artifactId>
      <version>${plugin.compile.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.openstreetmap.josm</groupId>
      <artifactId>josm-unittest</artifactId>
    </dependency>
  </dependencies>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.openstreetmap.josm</groupId>
        <artifactId>josm-unittest</artifactId>
        <version>1.0-SNAPSHOT</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <build>
    <sourceDirectory>${plugin.src.dir}</sourceDirectory>
    <testSourceDirectory>${plugin.test.src.dir}</testSourceDirectory>
    <resources>
      <resource>
        <directory>${plugin.resources.dir}/data</directory>
        <targetPath>data</targetPath>
      </resource>
      <resource>
        <directory>${plugin.resources.dir}/images</directory>
        <targetPath>images</targetPath>
      </resource>
      <resource>
        <directory>${plugin.resources.dir}/resources</directory>
        <targetPath>resources</targetPath>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>${plugin.test.data.dir}</directory>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!-- Configure checkstyle/pmd/other lint plugins -->
        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>4.8.1.0</version>
          <configuration>
            <xmlOutput>true</xmlOutput>
            <spotbugsXmlOutputFilename>spotbugs-josm.xml</spotbugsXmlOutputFilename>
            <effort>max</effort>
            <excludeFilterFile>${spotbugs.dir}/josm-filter.xml</excludeFilterFile>
            <onlyAnalyze>org.openstreetmap.josm.-</onlyAnalyze>
            <threshold>LOW</threshold>
          </configuration>
          <!-- This is commented out until all the current bugs are fixed. TODO uncomment!
          <executions>
            <execution>
              <id>validate</id>
              <phase>validate</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
          -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>3.3.1</version>
          <configuration>
            <configLocation>${project.basedir}/../checkstyle-config.xml</configLocation>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <outputFile>${project.basedir}/checkstyle-josm-${project.name}.xml</outputFile>
            <!-- checkstyle cannot parse module-info.java yet -->
            <excludes>module-info.java</excludes>
          </configuration>
          <executions>
            <execution>
              <id>validate</id>
              <phase>validate</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Configure the test plugin, specifically enable autodetection of global extensions -->
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.2.5</version>
          <configuration>
            <skipAfterFailureCount>1</skipAfterFailureCount>
            <argLine>-javaagent:"${settings.localRepository}"/org/jmockit/jmockit/${jmockit.version}/jmockit-${jmockit.version}.jar</argLine>
            <properties>
              <configurationParameters>
                file.encoding = UTF-8
                java.locale.providers = SPI,CLDR
                junit.jupiter.extensions.autodetection.enabled = true
                junit.jupiter.execution.parallel.enabled = true
              </configurationParameters>
            </properties>
            <systemPropertyVariables>
              <josm.home>${plugin.test.dir}/config/josm.home</josm.home>
              <josm.test.data>${plugin.test.data.dir}</josm.test.data>
              <java.awt.headless>${test.headless}</java.awt.headless>
              <glass.platform>Monocle</glass.platform>
              <monocle.platform>Headless</monocle.platform>
              <prism.order>sw</prism.order>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <!-- the clean plugin is needed since we currently store generated sources in the source directory -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.3.2</version>
          <configuration>
            <filesets>
              <fileset>
                <directory>${plugin.build.dir}</directory>
              </fileset>
              <fileset>
                <directory>${plugin.dist.dir}</directory>
                <includes>
                  <include>${plugin.jar}</include>
                  <include>${plugin.unixoid.jar}</include>
                  <include>${plugin.windows.jar}</include>
                  <include>${plugin.osx.jar}</include>
                  <include>${plugin.sources.jar}</include>
                  <include>${plugin.javadoc.jar}</include>
                </includes>
              </fileset>
              <fileset>
                <directory>${project.basedir}</directory>
                <includes>
                  <include>checkstyle-josm-${project.name}.xml</include>
                </includes>
              </fileset>
            </filesets>
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.diffplug.spotless</groupId>
          <artifactId>spotless-maven-plugin</artifactId>
          <version>2.43.0</version>
          <configuration>
            <java>
              <eclipse>
                <version>4.21.0</version>
                <file>${project.basedir}/../00_core_tools/eclipse/formatter.xml</file>
              </eclipse>
              <removeUnusedImports/>
              <licenseHeader>
                <content>// License: GPL. For details, see LICENSE file.</content>
              </licenseHeader>
            </java>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Used to merge compile dependencies into jars -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.5.3</version>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <outputDirectory>${plugin.dist.dir}</outputDirectory>
                <finalName>${project.name}</finalName>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- Used to share properties between maven, gradle, and ant, where there is a gradle.properties file -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>properties-maven-plugin</artifactId>
          <version>1.2.1</version>
          <executions>
            <execution>
              <phase>initialize</phase>
              <goals>
                <goal>read-project-properties</goal>
              </goals>
              <configuration>
                <files>
                  <file>gradle.properties</file>
                </files>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <configuration>
            <archive>
              <manifestEntries>
                <!-- For full documentation, see https://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins#ThemanifestfileforaJOSMplugin -->
                <Plugin-Mainversion>${plugin.main.version}</Plugin-Mainversion>
                <Plugin-Version>${project.version}</Plugin-Version>
                <Plugin-Class>${plugin.class}</Plugin-Class>
                <Plugin-Description>${plugin.description}</Plugin-Description>
                <!-- These are optional, but are either added almost all the time or can be auto generated -->
                <Plugin-Date>${maven.build.timestamp}</Plugin-Date>
                <Author>${plugin.author}</Author>
                <!-- These are optional and/or uncommon -->
                <!-- plugin.platform must be `Windows`, `Osx`, or `Unixoid` -->
                <!--
                <Plugin-Platform>${plugin.platform}</Plugin-Platform>
                <Plugin-Provides>${plugin.provides}</Plugin-Provides>
                <Plugin-Minimum-Java-Version>${plugin.minimum.java.version}</Plugin-Minimum-Java-Version>
                <Plugin-Early>${plugin.early}</Plugin-Early>
                <Plugin-Link>${plugin.link}</Plugin-Link>
                <Plugin-Icon>${plugin.icon}</Plugin-Icon>
                <Plugin-Stage>${plugin.stage}</Plugin-Stage>
                <Plugin-Requires>${plugin.requires}</Plugin-Requires>
                <Plugin-Canloadatruntime>${plugin.canloadatruntime}</Plugin-Canloadatruntime>
                <Class-Path>${plugin.classpath}</Class-Path>
                -->
                <!-- Additional entries: <xxx>_Plugin-Url (doesn't work well with xml) and <lang>_Plugin_Description -->
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>
        <!-- For any jaxb plugins -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>jaxb2-maven-plugin</artifactId>
          <version>2.5.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  <profiles>
    <profile>
      <!-- This profile is needed to avoid trying to install a non-jar file -->
      <id>not-pom-packaging</id>
      <activation>
        <property>
          <name>packaging</name>
          <value>!pom</value>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-install-plugin</artifactId>
              <version>3.1.1</version>
              <executions>
                <execution>
                  <id>dist-install</id>
                  <phase>install</phase>
                  <goals>
                    <goal>install-file</goal>
                  </goals>
                  <configuration>
                    <file>${plugin.dist.dir}/${project.name}.jar</file>
                    <artifactId>${project.artifactId}</artifactId>
                    <groupId>${project.groupId}</groupId>
                    <version>${project.version}</version>
                    <packaging>${project.packaging}</packaging>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
    <profile>
      <id>java-21-plugins</id>
      <activation>
        <jdk>[21,]</jdk>
      </activation>
      <modules>
        <module>FIT</module>
        <module>MicrosoftStreetside</module>
      </modules>
    </profile>
    <profile>
      <id>java-17-plugins</id>
      <activation>
        <jdk>[17,]</jdk>
      </activation>
      <modules>
        <module>imageio</module>
        <module>pmtiles</module>
      </modules>
    </profile>
  </profiles>
</project>
