apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'pmd'

configurations {
  compile.extendsFrom(requiredPlugin)
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/josm-tasks.gradle'
apply from: 'gradle/tool-config.gradle'

sourceCompatibility = '1.8'

repositories {
  // for JUnit
  mavenCentral()
  //for josm-(latest|tested).jar
  ivy {
    url 'https://josm.openstreetmap.de/download'
    layout 'pattern', {
      artifact "[artifact]-[revision].jar"
      artifact "[artifact]-snapshot-[revision].jar"
      artifact "Archiv/[artifact]-snapshot-[revision].jar"
    }
  }
  //for josm-plugins
  ivy {
    url "https://svn.openstreetmap.org/applications/editors/josm/dist/"
    layout "pattern", {
      artifact "[artifact].jar"
    }
  }
}

dependencies {
  /**
   * The JOSM-version can be specified as "latest", "tested" or the numeric version number.
   * When using a numeric version number you can leave out {changing=true}.
   *
   * Please check for numeric versions, if that specific version is available for download from https://josm.openstreetmap.de/download/ .
   * If not, choose the next higher number that is available, or the gradle build will break.
   */
  compile(':josm:10966')
  // For plugins it's irrelevant, which version is specified, always the latest version is used.
  requiredPlugin (name: 'apache-commons'){changing=true}
  requiredPlugin (name: 'apache-http'){changing=true}

  testCompile 'junit:junit:4.12'
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
    resources {
      srcDirs = ["$projectDir"]
      include 'data/**'
      include 'images/**'
      include 'README'
      include 'LICENSE*'
    }
  }
  test {
    java {
      srcDirs = ['test/unit']
    }
    resources{
      srcDirs = ['test/data']
    }
  }
}

eclipse {
  project {
    name = 'JOSM-Mapillary'
    comment = property('plugin.description')
    natures 'org.sonarlint.eclipse.core.sonarlintNature', 'ch.acanda.eclipse.pmd.builder.PMDNature', 'org.eclipse.buildship.core.gradleprojectnature'
    buildCommand 'org.sonarlint.eclipse.core.sonarlintBuilder'
    buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  }
}
eclipseClasspath.dependsOn cleanEclipseClasspath
eclipseProject.dependsOn cleanEclipseProject
tasks.eclipse.dependsOn = ['eclipseClasspath', 'eclipseProject']

tasks.withType(Javadoc) {
  failOnError false
}

test {
  testLogging {
    exceptionFormat "full"
    events "started", "passed", "skipped", "failed", "standardOut", "standardError"
  }
}
