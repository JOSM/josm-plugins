// JaCoCo config
jacoco {
  toolVersion = libs.versions.jacoco.get()
}
jacocoTestReport {
  reports {
    xml.required = true
  }
  dependsOn test
}
build.dependsOn jacocoTestReport

// PMD config
pmd {
  toolVersion libs.versions.pmd.get()
  ignoreFailures true
  ruleSetConfig = resources.text.fromFile('config/pmd/ruleset.xml')
  sourceSets = [sourceSets.main, sourceSets.test]
}

// SonarQube config
sonar {
  properties {
    property 'sonar.forceAuthentication', 'true'
    property 'sonar.host.url', 'https://sonarqube.com'
    property 'sonar.projectKey', 'org.openstreetmap.josm.plugins:Microsoft-Streetside'
    property 'sonar.projectName', 'ms-streetside-josm-plugin'
    property 'sonar.projectVersion', project.version
    property 'sonar.projectDescription', property('plugin.description')
    property 'sonar.sources', ['src']
  }
}
